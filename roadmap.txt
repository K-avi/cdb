Tests : 
    - tested map; might require more testing idk


The map is currently implemented as a weird mix between linear probing and chaining ; collisions are resolved w linear probing 
and multiple versions of the same key are chained in a single bucket 

The versions are currently stored in a basic linked list bc it was very easy to implement. 
It might be better to use a dynamic array for real life performance or an AVL like structure 
for the best theoritical / complexity / scalability 
I gues it also depends on the workload


the timestamps might be wrong BC I might want to use 2 of them instead of one (shite)
I'm NOT fixing this now; this will be a problem for future me 
merge support :(


Implementation : 

    Done : 

        - Map (needs more testing)
         
    Not done : 
        - journal

        - transaction 

        - Bloom Filter 

        - composition 


TODO : 
    - muti threaded and acid compliant journal / map 
        - LWW policy 
    - transaction module
    - keep in mind the implem has to be as modular as possible for composition's sake  
    - custom allocator (if I want to make smtg scalable I WILL have to use this)
