Tests : 
    - done atm


The map is currently implemented as a weird mix between linear probing and chaining ; collisions are resolved w linear probing 
and multiple versions of the same key are chained in a single bucket 

The versions are currently stored in a basic linked list bc it was very easy to implement. 
It might be better to use a dynamic array for real life performance or an AVL like structure 
for the best theoritical / complexity / scalability 
I gues it also depends on the workload


Implementation : 
    - Map is first 
        - test map primitives (locks are so much easier than atomics)

should i use a 
mapbucket** for the bucket list in the map 
idk 
on the one hand it fucks up mem proximity and stuff 
on the other hand it makes my life easier 
and enables efficient head insert 

tbh now that I think about it, the best implem is prolly 
a linked list of static arrays 

fuck 



TODO : 
    - muti threaded and acid compliant journal / map 
        - LWW policy 
    - transaction module
    - keep in mind the implem has to be as modular as possible for composition's sake  
    - custom allocator (if I want to make smtg scalable I WILL have to use this)
